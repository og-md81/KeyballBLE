#define ZMK_POINTING_DEFAULT_SCRL_VAL 120    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        ROTATE: ROTATE {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "ROTATE";
            #sensor-binding-cells = <2>;
            bindings = <&msc>, <&msc>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W         &kp E         &kp R      &kp T                                                    &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A      &kp S         &kp D         &kp F      &kp G        &mkp LCLK                    &kp DEL        &kp H        &kp J  &kp K      &kp L    &kp RIGHT_SHIFT
&kp Z      &kp X         &kp C         &kp V      &kp B        &lt_to_layer_0 6 ESCAPE      &to 0          &kp N        &kp M  &kp COMMA  &kp DOT  &kp KP_MINUS
&kp LCTRL  &kp LEFT_WIN  &kp LEFT_ALT  &kp LCTRL  &lt 3 SPACE  &mt LEFT_SHIFT TAB           &kp BACKSPACE  &lt 3 ENTER                             &mo 5
            >;

            sensor-bindings = <&ROTATE SCRL_DOWN SCRL_UP>;
        };

        FUNCTION {
            bindings = <
&kp QUESTION      &kp LEFT_BRACKET  &kp EXCL          &kp LS(LEFT_BRACKET)  &kp LS(EQUAL)                      &kp DOLLAR     &kp LS(INT_RO)  &kp LS(RIGHT_BRACKET)  &kp LS(NUHS)  &kp PERCENT
&kp LS(NUMBER_6)  &kp LS(N7)        &kp LS(NUMBER_2)  &kp SINGLE_QUOTE      &kp SEMICOLON  &trans      &trans  &kp HASH       &trans          &kp RIGHT_BRACKET      &kp LS(NUHS)  &trans
&kp LS(N8)        &kp LS(N9)        &kp EQUAL         &kp INT_YEN           &kp INT_RO     &trans      &trans  &kp LS(MINUS)  &kp KP_PLUS     &kp LS(SINGLE_QUOTE)   &kp SLASH     &kp KP_MINUS
&trans            &trans            &trans            &trans                &trans         &trans      &trans  &trans                                                              &trans
            >;
        };

        NUM {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                                        &kp NUMBER_6   &kp N7       &kp N8                &kp N9     &kp N0
&kp F1        &kp F2        &kp F3        &kp F4        &kp F5   &kp LC(LA(KP_NUMBER_0))      &trans  &kp F6         &kp F7       &kp F8                &kp F9     &trans
&kp LS(N8)    &kp LS(N9)    &kp F10       &kp F11       &kp F12  &trans                       &trans  &kp LS(MINUS)  &kp KP_PLUS  &kp LS(SINGLE_QUOTE)  &kp SLASH  &kp KP_MINUS
&trans        &trans        &trans        &trans        &trans   &trans                       &trans  &trans                                                       &trans
            >;
        };

        ARROW {
            bindings = <
&kp QUESTION      &kp LC(LS(TAB))         &trans  &kp LC(TAB)              &trans                              &kp HOME        &kp PAGE_UP     &kp UP_ARROW    &trans     &kp PERCENT
&kp LS(NUMBER_6)  &kp LA(LEFT)            &trans  &kp LA(RIGHT)            &trans          &trans      &to 2   &kp HASH        &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &kp RSHFT
&trans            &kp LG(LS(LEFT_ARROW))  &trans  &kp LG(LS(RIGHT_ARROW))  &trans          &trans      &to 1   &kp END         &kp PAGE_DOWN   &trans          &trans     &trans
&trans            &trans                  &trans  &trans                   &kp LANGUAGE_2  &trans      &trans  &kp LANGUAGE_1                                             &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans    &trans     &trans     &trans     &trans                           &trans    &trans     &trans     &trans     &trans
&mkp MB4  &mkp LCLK  &mkp MCLK  &mkp RCLK  &mkp MB5  &mkp LCLK      &trans  &mkp MB4  &mkp LCLK  &mkp MCLK  &mkp RCLK  &mkp MB5
&trans    &trans     &trans     &trans     &trans    &mkp RCLK      &trans  &trans    &trans     &trans     &trans     &trans
&trans    &trans     &trans     &trans     &trans    &trans         &trans  &trans                                     &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                                 &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans     &trans      &studio_unlock  &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kt KP_N4  &trans      &bootloader     &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans     &trans      &trans          &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
